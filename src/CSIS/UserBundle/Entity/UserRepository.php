<?php

namespace CSIS\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;


/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    public function findAllOrderByNameByEnabledPaginated($start, $limit)
    {
        $qb = $this->createQueryBuilder('u');
        $qb = $this->qbOrderByName($qb);
        $qb = $this->qbPaginate($qb, $start, $limit);
        
        return new Paginator($qb);
    }
    
    public function getQbfindAllWithEstabRole() {
        $qb = $this->createQueryBuilder('u');
        return $this->qbWithRole($qb, 'ROLE_GEST_ESTAB');
    }
    
    public function getQbFindSuperiorWhithLabRole(User $user)
    {
        $qb = $this->createQueryBuilder('u');
        
        if (!$user->hasRole('ROLE_ADMIN')) {
            $qb->leftJoin('u.institution', 'i')
               ->where($qb->expr()->orX(
                         ':user MEMBER OF i.owners',    
                         $qb->expr()->eq('u.institution', ':institution')
                      ))
               ->setParameter('institution', $user->getInstitution());
        }
        return $qb->andWhere( $qb->expr()->andX(
                            $qb->expr()->orX(
                                $qb->expr()->like('u.roles', ':role1'),
                                $qb->expr()->like('u.roles', ':role2'),
                                $qb->expr()->like('u.roles', ':role3')
                            ),
                            $qb->expr()->not($qb->expr()->eq('u', ':user'))
                    ))
                  ->setParameter('user', $user)
                  ->setParameter('role1', '%ROLE_GEST_LAB%')
                  ->setParameter('role2', '%ROLE_GEST_ESTAB%')
                  ->setParameter('role3', '%ROLE_ADMIN%');
    }
    
    public function getQbFindSuperiorWhithEquipmentRole(User $user)
    {
        $qb = $this->createQueryBuilder('u');
        
        if (!$user->hasRole('ROLE_ADMIN')) {
            $qb->leftJoin('u.lab', 'l')
                ->leftJoin('l.institution', 'i')
                ->where($qb->expr()->orX(
                                ':user MEMBER OF l.owners',
                                ':user MEMBER OF i.owners',
                                $qb->expr()->eq('u.institution', ':institution'),
                                $qb->expr()->eq('u.lab', ':lab')
                          ))
                ->setParameter('institution', $user->getInstitution())
                ->setParameter('lab', $user->getLab());
        }
        return $qb->andWhere( $qb->expr()->andX(
                        $qb->expr()->orX(
                                $qb->expr()->like('u.roles', ':role1'),
                                $qb->expr()->like('u.roles', ':role2'),
                                $qb->expr()->like('u.roles', ':role3'),
                                $qb->expr()->like('u.roles', ':role4')
                        ),
                        $qb->expr()->not($qb->expr()->eq('u', ':user'))
                    ))
                ->setParameter('user', $user)
                ->setParameter('role1', '%ROLE_GEST_EQUIP%')
                ->setParameter('role2', '%ROLE_GEST_LAB%')
                ->setParameter('role3', '%ROLE_GEST_ESTAB%')
                ->setParameter('role4', '%ROLE_ADMIN%');
    }
    
    public function findAllOrderByNamePaginated($start, $limit)
    {
        $qb = $this->createQueryBuilder('u');
        $qb = $this->qbOrderByName($qb);
        $qb = $this->qbPaginate($qb, $start, $limit);
        
        return new Paginator($qb);
    }
    
    private function qbWithRole(QueryBuilder $qb, $role)
    {
        return $qb->Where($qb->expr()->like('u.roles', ':role'))
                  ->setParameter('role', '%'.$role.'%');
        
    }
    
    private function qbOrderByName(QueryBuilder $qb)
    {
        return $qb->orderBy('u.lastName', 'ASC')
                ->addOrderBy('u.firstName', 'ASC');
    }

    private function qbPaginate(QueryBuilder $qb, $start, $limit)
    {
        if ($start < 1) {
            throw new \InvalidArgumentException('L\'argument $start ne peut être inférieur à 1 (valeur : "' . $start . '").');
        }

        return $qb->setFirstResult(($start - 1) * $limit)
                  ->setMaxResults($limit);
    }

    public function findAutocomplete($email)
    {
        $qb = $this->createQueryBuilder('u');

        return $qb->where($qb->expr()->like('u.email', ':email'))
            ->orderBy('u.email')
            ->setParameter('email', '%'.$email.'%')
            ->setFirstResult(0)
            ->setMaxResults(10)
            ->getQuery()
            ->getResult();
    }

    public function waitingUsers()
    {
        $qb = $this->createQueryBuilder('u')
            ->select('count(u) as nb')
            ->where('u.enabled = false');

        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * @param $role
     *
     * @return array
     */
    public function findByRole($role)
    {
        $qb = $this->createQueryBuilder('u')
            ->where('u.roles LIKE :roles')
            ->setParameter('roles', '%"' . $role . '"%');

        return $qb->getQuery()->getResult();
    }
}
