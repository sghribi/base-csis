<?php

namespace CSIS\EamBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Doctrine\ORM\Query\ResultSetMapping;

use CSIS\UserBundle\Entity\User;

/**
 * LaboratoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LaboratoryRepository extends EntityRepository {
    
    /*
     * used by laboratory index
     */
    public function findByOwnerOrderByAcronymPaginated(User $user,$start, $limit) {
        $qb = $this->createQueryBuilder('l');
        $qb = $this->qbByOwners($qb, $user);
        $qb = $this->qbOrderByAcronym($qb);
        $qb = $this->qbPaginate($qb, $start, $limit);
        
        return new Paginator($qb);
    }
    
    /*
     * used by admin index
     */
    public function findByOwnersOrderByEditDatePaginated(User $user, $start, $limit) {
        $qb = $this->createQueryBuilder('l');
        $qb = $this->qbByOwners($qb, $user);
        $qb = $this->qbOderByEditDate($qb);
        $qb = $this->qbPaginate($qb, $start, $limit);
        
        return new Paginator($qb);
    }
    
    /*
     * used by user index
     */
    public function findByOwners(User $user) {
      $qb = $this->createQueryBuilder('l');
      $qb = $this->qbByOwners($qb, $user);
      
      return $qb->getQuery()->getResult();
    }
    
    public function getQbReachableLaboratoriesOrderedByAcronym(User $user)
    {
        $qb = $this->createQueryBuilder('l');
        $qb = $this->qbOrderByAcronym($qb);
        $qb = $this->qbReachByUser($qb, $user);

        return $this->qbByOwners($qb, $user);
    }
    
    public function getQbByOwnersOrderByAcronym(User $user) {
        $qb = $this->createQueryBuilder('l');
        $qb = $this->qbOrderByAcronym($qb);
        
        return $this->qbByOwners($qb, $user);
    }
    
    private function qbReachByUser(QueryBuilder $qb, User $user) {
        if ( !$user->hasRole('ROLE_ADMIN')) {
            return $qb->orWhere($qb->expr()->eq('l', ':laboratory'))
                      ->orWhere($qb->expr()->eq('l.institution', ':institution'))
                      ->setParameter('institution', $user->getInstitution())
                      ->setParameter('laboratory', $user->getLab());
        } else {
            return $qb;
        }
    }

    private function qbByOwners(QueryBuilder $qb, User $user) {
        if ( !$user->hasRole('ROLE_ADMIN') ) {
            return $qb->leftJoin('l.institution', 'i')
                      ->orWhere(':user MEMBER OF l.owners')
                      ->orWhere(':user MEMBER OF i.owners')
                      ->setParameter('user', $user);
        } else {
            return $qb;
        }
    }

    private function qbOderByEditDate(QueryBuilder $qb) {
        return $qb->orderBy('l.lastEditDate', 'DESC');
    }
    
    private function qbOrderByAcronym(QueryBuilder $qb) {
        return $qb->orderBy('l.acronym', 'ASC');
    }

    private function qbPaginate(QueryBuilder $qb, $start, $limit) {
        if ($start < 1) {
            throw new \InvalidArgumentException('L\'argument $start ne peut être inférieur à 1 (valeur : "' . $start . '").');
        }

        return $qb->setFirstResult(($start - 1) * $limit)
                  ->setMaxResults($limit);
    }
}
