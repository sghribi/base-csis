<?php

namespace CSIS\EamBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\Query;
use Doctrine\ORM\Query\Expr\Join;

/**
 * TagRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TagRepository extends EntityRepository
{

    public function findAllOrderByTag()
    {
        // Recherche tous les tags par ordre alphabétique
        $qb = $this->createQueryBuilder('t');

        $qb->orderBy('t.tag', 'ASC');

        return $qb->getQuery()->getResult();
    }

    public function findRelativeTags( $tags )
    {
        if (count($tags) == 0) {
            return array();
        }

        $rsm = new ResultSetMapping();
        $rsm->addEntityResult('CSISEamBundle:Tag', 'tag2', 'tag');
        $rsm->addFieldResult('tag2', 'id', 'id');
        $rsm->addFieldResult('tag2', 'tag', 'tag');
        $rsm->addFieldResult('tag2', 'status', 'status');

        $sql = <<<SQL
SELECT `tag2`.`id`, `tag2`.`tag`, `tag2`.`status`, COUNT(`t2`.`tag_id`) AS `nombre`
FROM `equipment_tag` AS `t1`
JOIN `equipment_tag` AS `t2` ON `t1`.`equipment_id` = `t2`.`equipment_id`
LEFT JOIN `tag` AS `tag2` ON `t2`.`tag_id` = `tag2`.`id`
WHERE `t1`.`tag_id` != `t2`.`tag_id` AND `tag2`.`status` = 1 AND `t1`.`tag_id` IN (%s)
GROUP BY `t1`.`tag_id`, `t2`.`tag_id`
ORDER BY `nombre` DESC
LIMIT 0, 10
SQL;

        $tagsId = array( );
        foreach ( $tags as $tag ) {
            $tagsId[] = $tag->getId();
        }

        $query = $this->_em->createNativeQuery(sprintf($sql, implode(',', $tagsId)), $rsm);
        
        return $query->getResult();
    }

    public function waitingTags()
    {
        return $this->createQueryBuilder('t')
            ->select('count(t)')
            ->where('t.status = :pending')
            ->setParameter('pending', Tag::PENDING)
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function findSearch( $search )
    {
        // Recherche tous les tags par ordre alphabétique
        $qb = $this->createQueryBuilder('t');

        $qb->where($qb->expr()->like('t.tag', ':tag'))
                ->orderBy('t.tag', 'ASC')
                ->setMaxResults(10)
                ->setParameter('tag', $search . '%')
        ;

        return $qb->getQuery()->getResult();
    }

    public function findAutocomplete( $tag )
    {
        $qb = $this->createQueryBuilder('t');

        // On ne recherche que les tags validés ou en attente
        $qb->where($qb->expr()->like('t.tag', ':tag'))
            ->andWhere('t.status = 0 OR t.status = 1')
                ->orderBy('t.tag')
                ->setParameter('tag', '%' . $tag . '%')
                ->setFirstResult(0)
                ->setMaxResults(10)
        ;

        return $qb->getQuery()->getResult();
    }

    public function findTagsStandByWithNumberOfUse($start, $limit)
    {
        $qb = $this->createQueryBuilder('t')
            ->select('t as tag, count(e) as nb')
            ->leftJoin('t.equipments', 'e')
            ->orderBy('t.tag')
            ->groupBy('t.id')
            ->where('t.status = :status')
            ->setParameter('status', Tag::PENDING)
            ->setFirstResult(($start-1)*$limit)
            ->setMaxResults($limit);

        return $qb->getQuery()->getResult();
    }


    public function findTagsWithNumberOfUse($start, $limit)
    {
        $qb = $this->createQueryBuilder('t')
            ->select('t as tag, count(e) as nb')
            ->leftJoin('t.equipments', 'e')
            ->orderBy('t.tag')
            ->groupBy('t.id')
            ->setFirstResult(($start-1)*$limit)
            ->setMaxResults($limit);

        return $qb->getQuery()->getResult();
    }

    /**
     * @param Tag $tag
     *
     * @return boolean
     */
    public function isTagUsed(Tag $tag)
    {
        $qb = $this->createQueryBuilder('t')
            ->join('t.equipments', 'e')
            ->where('t.id = :tagId')
            ->setParameter('tagId', $tag->getId())
            ->select('count(e)');

        return $qb->getQuery()->getSingleScalarResult() > 0;
    }
}
