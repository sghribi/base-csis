<?php

namespace CSIS\EamBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\Common\Collections\Collection;

/**
 * TagRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TagRepository extends EntityRepository
{

    public function findAllOrderByTag()
    {
        // Recherche tous les tags par ordre alphabétique
        $qb = $this->createQueryBuilder('t');

        $qb->orderBy('t.tag', 'ASC');

        return $qb->getQuery()->getResult();
    }

    public function findRelativeTags( Collection $tags )
    {
        $rsm = new ResultSetMapping();
        $rsm->addEntityResult('CSISEamBundle:Tag', 'tag2', 'tag');
        $rsm->addFieldResult('tag2', 'id', 'id');
        $rsm->addFieldResult('tag2', 'tag', 'tag');
        $rsm->addFieldResult('tag2', 'status', 'status');

        $sql = <<<SQL
SELECT `tag2`.`id`, `tag2`.`tag`, `tag2`.`status`, COUNT(`t2`.`tag_id`) AS `nombre`
FROM `equipment_tag` AS `t1`
JOIN `equipment_tag` AS `t2` ON `t1`.`equipment_id` = `t2`.`equipment_id`
LEFT JOIN `tag` AS `tag2` ON `t2`.`tag_id` = `tag2`.`id`
WHERE `t1`.`tag_id` != `t2`.`tag_id` AND `tag2`.`status` = 1 AND `t1`.`tag_id` IN (%s)
GROUP BY `t1`.`tag_id`, `t2`.`tag_id`
ORDER BY `nombre` DESC
LIMIT 0, 10
SQL;

        $tagsId = array( );
        foreach ( $tags as $tag ) {
            $tagsId[] = $tag->getId();
        }

        $query = $this->_em->createNativeQuery(sprintf($sql, implode(',', $tagsId)), $rsm);
        
        return $query->getResult();
    }

    public function findTagsWithNumberOfUse( $start, $limit )
    {
        // Recherche la liste des tags par ordre alphabétique et leur nombre d'utilisation
        $rsm = new ResultSetMapping();
        $rsm->addEntityResult('CSISEamBundle:Tag', 't', 'tag');
        $rsm->addFieldResult('t', 'id', 'id');
        $rsm->addFieldResult('t', 'tag', 'tag');
        $rsm->addFieldResult('t', 'status', 'status');
        $rsm->addScalarResult('nb', 'nb');

        $query = $this->_em->createNativeQuery(
                'SELECT id, tag, status, count(equipment_id) as nb '
                . 'FROM `tag` LEFT JOIN  `equipment_tag` ON `tag`.id=`equipment_tag`.tag_id '
                . 'GROUP BY id ORDER BY tag asc LIMIT ' . (($start - 1) * $limit) . ', ' . $limit, $rsm
        );

        $tags = $query->getResult();

        return $tags;
    }

    public function findTagsStandByWithNumberOfUse( $start, $limit )
    {
        // Recherche la liste des tags par ordre alphabétique et leur nombre d'utilisation
        $rsm = new ResultSetMapping();
        $rsm->addEntityResult('CSISEamBundle:Tag', 't', 'tag');
        $rsm->addFieldResult('t', 'id', 'id');
        $rsm->addFieldResult('t', 'tag', 'tag');
        $rsm->addFieldResult('t', 'status', 'status');
        $rsm->addScalarResult('nb', 'nb');

        $query = $this->_em->createNativeQuery(
                'SELECT id, tag, status, count(equipment_id) as nb '
                . 'FROM `tag` LEFT JOIN  `equipment_tag` ON `tag`.id=`equipment_tag`.tag_id '
                . 'WHERE status=0 GROUP BY id  ORDER BY tag asc LIMIT ' . (($start - 1) * $limit) . ', ' . $limit, $rsm
        );

        $tags = $query->getResult();

        return $tags;
    }

    public function isTagUsed( $id )
    {
        $rsm = new ResultSetMapping();
        $rsm->addEntityResult('CSISEamBundle:Tag', 't', 'tag');
        $rsm->addFieldResult('t', 'id', 'id');
        $rsm->addFieldResult('t', 'tag', 'tag');
        $rsm->addFieldResult('t', 'status', 'status');
        $rsm->addScalarResult('nb', 'nb');

        $query = $this->_em->createNativeQuery(
                'SELECT id, tag, status, count(equipment_id) as nb '
                . 'FROM `tag` LEFT JOIN  `equipment_tag` ON `tag`.id=`equipment_tag`.tag_id '
                . 'WHERE id = ? GROUP BY id  ORDER BY tag asc', $rsm
        );

        $query->setParameter(1, $id);

        $tag = $query->getResult();

        if ( $tag[0]['nb'] == 0 )
            return false;
        else
            return true;
    }

    public function waitingTags()
    {
        $rsm = new ResultSetMapping();
        $rsm->addScalarResult('nb', 'nb');

        $query = $this->_em->createNativeQuery('SELECT count(*) as nb FROM `tag` WHERE status = 0', $rsm);

        $tag = $query->getScalarResult();

        return $tag[0]['nb'];
    }

    public function findSearch( $search )
    {
        // Recherche tous les tags par ordre alphabétique
        $qb = $this->createQueryBuilder('t');

        $qb->where($qb->expr()->like('t.tag', ':tag'))
                ->orderBy('t.tag', 'ASC')
                ->setMaxResults(10)
                ->setParameter('tag', $search . '%')
        ;

        return $qb->getQuery()->getResult();
    }

    public function findAutocomplete( $tag )
    {
        $qb = $this->createQueryBuilder('t');

        $qb->where($qb->expr()->like('t.tag', ':tag'))
                ->orderBy('t.tag')
                ->setParameter('tag', '%' . $tag . '%')
                ->setFirstResult(0)
                ->setMaxResults(10)
        ;

        return $qb->getQuery()->getResult();
    }

}
