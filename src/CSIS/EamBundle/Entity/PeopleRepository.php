<?php

namespace CSIS\EamBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * PeopleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PeopleRepository extends EntityRepository {
  
    public function findSearch($search)
    {
        // Recherche tous les tags par ordre alphabétique
        $queryBuilder = $this->_em->createQueryBuilder();
        
        $queryBuilder->select('c.id, c.email')
                     ->from($this->_entityName, 'c')
                     ->where("c.email LIKE '$search%'")
                     ->orderBy('c.email', 'ASC');
        
        return $queryBuilder->getQuery()->setMaxResults(10)->getResult();
    }
    
    /*
     * used by peoples index
     */
    public function findByOrderNamePaginated ($start, $limit){
        $qb = $this->createQueryBuilder('c');
        $qb = $this->qbOrderByName($qb);
        $qb = $this->qbPaginate($qb, $start, $limit);
        
        return new Paginator($qb);
    }
    
    public function findAutocomplete($email) {
        $qb = $this->createQueryBuilder('p');
        
        return $qb->where($qb->expr()->like('p.email', ':email'))
           ->orderBy('p.email')
           ->setParameter('email', '%'.$email.'%')
           ->setFirstResult(0)
           ->setMaxResults(10)
           ->getQuery()
           ->getResult();
    }
    
    public function getQbFindAllOrderedByName() {
        $qb = $this->createQueryBuilder('c');
        
        return $this->qbOrderByName($qb);
    }
    
    private function qbOrderByName(QueryBuilder $qb) {
        return $qb->orderBy('c.name', 'ASC');
    }

    private function qbPaginate(QueryBuilder $qb, $start, $limit) {
        if ($start < 1) {
            throw new \InvalidArgumentException('L\'argument $start ne peut être inférieur à 1 (valeur : "' . $start . '").');
        }

        return $qb->setFirstResult(($start - 1) * $limit)
                  ->setMaxResults($limit);
    }
    
    public function isPeopleUsed($id)
    {
        $rsm = new ResultSetMapping();
        $rsm->addEntityResult('CSISEamBundle:People', 'p', 'people');
        $rsm->addFieldResult('p', 'id', 'id');
        $rsm->addScalarResult('nb', 'nb');
        
        $query = $this->_em->createNativeQuery('SELECT id, count(equipment_id) as nb 
                                                FROM `people` LEFT JOIN  `equipment_people` ON `people`.id=`equipment_people`.people_id 
                                                WHERE id = ?'
                                                , $rsm);
        
        $query->setParameter(1, $id);
        
        $people = $query->getResult();
        
        if ($people[0]['nb'] == 0) return false;
        
        else return true;
        
    }
}
