<?php

namespace CSIS\EamBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * CategorieRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryRepository extends EntityRepository
{
    
    public function findAllOrderByAcronym()
    {
        // Recherche tous les categories par ordre alphabétique
        $qb = $this->createQueryBuilder('f')
                     ->orderBy('f.name', 'ASC');
        
        return $qb->getQuery()
                  ->getResult();
    }
    
     /*
     * used by users index
     */
    public function findByOrderNamePaginated ($start, $limit){
        $qb = $this->createQueryBuilder('f');
        $qb = $this->qbOrderByName($qb);
        $qb = $this->qbPaginate($qb, $start, $limit);
        
        return new Paginator($qb);
    }
    
    private function qbOrderByName(QueryBuilder $qb) {
        return $qb->orderBy('f.name', 'ASC');
    }

    private function qbPaginate(QueryBuilder $qb, $start, $limit) {
        if ($start < 1) {
            throw new \InvalidArgumentException('L\'argument $start ne peut être inférieur à 1 (valeur : "' . $start . '").');
        }

        return $qb->setFirstResult(($start - 1) * $limit)
                  ->setMaxResults($limit);
    }
    
    public function isCategoryUsed($id)
    {
        $rsm = new ResultSetMapping();
        $rsm->addEntityResult('CSISEamBundle:Category', 'f', 'category');
        $rsm->addFieldResult('f', 'id', 'id');
        $rsm->addFieldResult('f', 'name', 'name');;
        $rsm->addScalarResult('nb', 'nb');
        
        $query = $this->_em->createNativeQuery('SELECT id, name, count(equipment_id) as nb 
                                                FROM `category` LEFT JOIN  `equipment_category` ON `category`.id=`equipment_category`.category_id 
                                                WHERE id = ?
                                                GROUP BY id 
                                                ORDER BY name asc'
                                                , $rsm);
        
        $query->setParameter(1, $id);
        
        $tag = $query->getResult();
        
        if ($tag[0]['nb'] == 0) return false;
        
        else return true;
        
    }
}
