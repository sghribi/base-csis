<?php

namespace CSIS\EamBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Doctrine\ORM\Query\ResultSetMapping;

use CSIS\UserBundle\Entity\User;

/**
 * InstitutionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InstitutionRepository extends EntityRepository {

    /*
     * used by vitrine
     */
    public function findAllInstitutionsWithLabsAndEquipments() {
        return $this->getEntityManager()
                    ->createQuery('SELECT partial i.{id, acronym}, partial l.{id, acronym}, partial e.{id, designation} '
                                 .'FROM CSISEamBundle:Institution i '
                                 .'LEFT JOIN i.laboratories l '
                                 .'LEFT JOIN l.equipments e')
                    ->getResult();
    }
    
    /*
     * user by user index
     */
    public function findByOwners(User $user) {
      $qb = $this->createQueryBuilder('i');
      $qb = $this->qbByOwners($qb, $user);
      
      return $qb->getQuery()->getResult();
    }
    
    /*
     * used by admin index
     */
    public function findByOwnersOrderByEditDatePaginated(User $user, $start, $limit) {
        $qb = $this->createQueryBuilder('i');
        $qb = $this->qbByOwners($qb, $user);
        $qb = $this->qbOderByEditDate($qb);
        $qb = $this->qbPaginate($qb, $start, $limit);
        
        return new Paginator($qb);
    }
    
    /*
     * used by institution index
     */
    public function findByOwnerOrderByAcronymPaginated(User $user,$start, $limit) {
        $qb = $this->createQueryBuilder('i');
        $qb = $this->qbByOwners($qb, $user);
        $qb = $this->qbOrderByAcronym($qb);
        $qb = $this->qbPaginate($qb, $start, $limit);
        
        return new Paginator($qb);
    }
    
    public function getQbReachableInstitutions($user) {
        $qb = $this->createQueryBuilder('i');
        $qb = $this->qbReachByUser($qb, $user);
        
        return $this->qbByOwners($qb, $user);
    }
    
    public function getQbByOwnersOrderByAcronym(User $user) {
        $qb = $this->createQueryBuilder('i');
        $qb = $this->qbOrderByAcronym($qb);
        
        return $this->qbByOwners($qb, $user);
    }
    
    private function qbReachByUser(QueryBuilder $qb, User $user) {
        if ( !$user->hasRole('ROLE_ADMIN') ) {
            return $qb->orWhere($qb->expr()->eq('i', ':institution'))
                      ->setParameter('institution', $user->getInstitution());
        } else {
            return $qb;
        }
    }

    private function qbByOwners(QueryBuilder $qb, User $user) {
        if ( !$user->hasRole('ROLE_ADMIN') ) {
            return $qb->orWhere(':user MEMBER OF i.owners')
                      ->setParameter('user', $user);
        } else {
            return $qb;
        }
    }

    private function qbOderByEditDate(QueryBuilder $qb) {
        return $qb->orderBy('i.lastEditDate', 'DESC');
    }
    
    private function qbOrderByAcronym(QueryBuilder $qb) {
        return $qb->orderBy('i.acronym', 'ASC');
    }

    private function qbPaginate(QueryBuilder $qb, $start, $limit) {
        if ($start < 1) {
            throw new \InvalidArgumentException('L\'argument $start ne peut être inférieur à 1 (valeur : "' . $start . '").');
        }

        return $qb->setFirstResult(($start - 1) * $limit)
                  ->setMaxResults($limit);
    }
    
    public function isInstitutionUsed($id)
    {
        $rsm = new ResultSetMapping();
        $rsm->addEntityResult('CSISEamBundle:Laboratory', 'l', 'laboratory');
        $rsm->addFieldResult('l', 'id', 'id');
        $rsm->addScalarResult('nb', 'nb');
        
        $query = $this->_em->createNativeQuery('SELECT id, count(id) as nb 
                                                FROM `laboratory`
                                                WHERE `laboratory`.institution_id = ?'
                                                , $rsm);
        
        $query->setParameter(1, $id);
        
        $laboratory = $query->getScalarResult();
        
        if ($laboratory[0]['nb'] == 0) return false;
        
        else return true;
        
    }
    
}
