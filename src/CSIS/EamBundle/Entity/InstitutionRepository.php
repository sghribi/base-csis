<?php

namespace CSIS\EamBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Doctrine\ORM\Query\ResultSetMapping;

use CSIS\UserBundle\Entity\User;

/**
 * InstitutionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InstitutionRepository extends EntityRepository
{

    /*
     * used by vitrine
     */
    public function findAllInstitutionsWithLabsAndEquipments() {
        return $this->getEntityManager()
                    ->createQuery('SELECT partial i.{id, acronym}, partial l.{id, acronym}, partial e.{id, designation} '
                                 .'FROM CSISEamBundle:Institution i '
                                 .'LEFT JOIN i.laboratories l '
                                 .'LEFT JOIN l.equipments e')
                    ->getResult();
    }
    
    /*
     * user by user index
     */
    public function findByOwners(User $user) {
      $qb = $this->createQueryBuilder('i');
      $qb = $this->qbByOwners($qb, $user);
      
      return $qb->getQuery()->getResult();
    }

    /*
     * used by institution index
     */
    public function findByOwnerOrderByAcronym(User $user) {
        $qb = $this->createQueryBuilder('i');
        $qb = $this->qbByOwners($qb, $user);
        $qb = $this->qbReachByUser($qb, $user);
        $qb = $this->qbOrderByAcronym($qb);

        return $qb->getQuery()->getResult();
    }
    
    public function getQbReachableInstitutions($user) {
        $qb = $this->createQueryBuilder('i');
        $qb = $this->qbReachByUser($qb, $user);
        
        return $this->qbByOwners($qb, $user);
    }
    
    public function getQbByOwnersOrderByAcronym(User $user) {
        $qb = $this->createQueryBuilder('i');
        $qb = $this->qbOrderByAcronym($qb);
        
        return $this->qbByOwners($qb, $user);
    }
    
    private function qbReachByUser(QueryBuilder $qb, User $user) {
        if ($user->hasRole('ROLE_GEST_ESTAB') || $user->hasRole('ROLE_ADMIN')) {
            return $qb;
        }

        return $qb->orWhere($qb->expr()->eq('i', ':institution'))
                  ->setParameter('institution', $user->getInstitution());
    }

    private function qbByOwners(QueryBuilder $qb, User $user) {
        if ($user->hasRole('ROLE_GEST_ESTAB') || $user->hasRole('ROLE_ADMIN')) {
            return $qb;
        }

        return $qb->orWhere(':user MEMBER OF i.owners')
                      ->setParameter('user', $user);
    }

    private function qbOderByEditDate(QueryBuilder $qb) {
        return $qb->orderBy('i.lastEditDate', 'DESC');
    }
    
    private function qbOrderByAcronym(QueryBuilder $qb) {
        return $qb->orderBy('i.acronym', 'ASC');
    }
}
